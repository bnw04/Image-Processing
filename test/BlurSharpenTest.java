import org.junit.Before;
import org.junit.Test;

import controller.loadersaver.ConventionalLoader;
import controller.loadersaver.IImageLoader;
import controller.loadersaver.PPMLoader;
import model.images.IImageState;
import model.transformation.BlurSharpen;
import model.transformation.ITransformation;

import static org.junit.Assert.assertEquals;

/**
 * A JUnit test class for the BlurSharpen class.
 */
public class BlurSharpenTest {
  private IImageState sourcePPM;
  private IImageState sourcePNG;
  private ITransformation blur;
  private ITransformation sharpen;

  @Before
  public void setUp() {
    blur = new BlurSharpen(new double[][]{
            {1.0 / 16, 1.0 / 8, 1.0 / 16},
            {1.0 / 8, 1.0 / 4, 1.0 / 8},
            {1.0 / 16, 1.0 / 8, 1.0 / 16}
    });

    sharpen = new BlurSharpen(new double[][]{
            {- 1.0 / 8, - 1.0 / 8, - 1.0 / 8, - 1.0 / 8, - 1.0 / 8},
            {- 1.0 / 8, 1.0 / 4, 1.0 / 4, 1.0 / 4, - 1.0 / 8},
            {- 1.0 / 8, 1.0 / 4, 1.0, 1.0 / 4, - 1.0 / 8},
            {- 1.0 / 8, 1.0 / 4, 1.0 / 4, 1.0 / 4, - 1.0 / 8},
            {- 1.0 / 8, - 1.0 / 8, - 1.0 / 8, - 1.0 / 8, - 1.0 / 8},
    });

    // three.png is a three by three ppm image
    IImageLoader loaderPPM = new PPMLoader("testImage/three.ppm");
    sourcePPM = loaderPPM.loadImage();

    // three.png has same pixel channel values with ppm image
    IImageLoader loaderPNG = new ConventionalLoader("testImage/three.png");
    sourcePNG = loaderPNG.loadImage();
  }

  @Test(expected = IllegalArgumentException.class)
  public void testNullBlurSharpenKernel() {
    new BlurSharpen(null);
  }


  @Test(expected = IllegalArgumentException.class)
  public void testBlurSharpenKernelEvenLessThanThree() {
    new BlurSharpen(new double[][]{
            {1.0 / 16, 1.0 / 8},
            {1.0 / 8, 1.0 / 4}
    });
  }

  @Test(expected = IllegalArgumentException.class)
  public void testBlurSharpenKernelNotSquare() {
    new BlurSharpen(new double[][]{
            {1.0 / 16},
            {1.0 / 8}
    });
  }

  @Test
  public void testBlurPPM() {

    IImageState blurredPPM = blur.run(sourcePPM);
    assertEquals(3, blurredPPM.getHeight());
    assertEquals(3, blurredPPM.getWidth());

    assertEquals(32, blurredPPM.getRedChannel(0, 0));
    assertEquals(64, blurredPPM.getGreenChannel(0, 0));
    assertEquals(48, blurredPPM.getBlueChannel(0, 0));

    assertEquals(102, blurredPPM.getRedChannel(1, 0));
    assertEquals(80, blurredPPM.getGreenChannel(1, 0));
    assertEquals(112, blurredPPM.getBlueChannel(1, 0));

    assertEquals(108, blurredPPM.getRedChannel(2, 0));
    assertEquals(32, blurredPPM.getGreenChannel(2, 0));
    assertEquals(80, blurredPPM.getBlueChannel(2, 0));

    assertEquals(36, blurredPPM.getRedChannel(0, 1));
    assertEquals(112, blurredPPM.getGreenChannel(0, 1));
    assertEquals(83, blurredPPM.getBlueChannel(0, 1));

    assertEquals(74, blurredPPM.getRedChannel(1, 1));
    assertEquals(100, blurredPPM.getGreenChannel(1, 1));
    assertEquals(170, blurredPPM.getBlueChannel(1, 1));

    assertEquals(79, blurredPPM.getRedChannel(2, 1));
    assertEquals(32, blurredPPM.getGreenChannel(2, 1));
    assertEquals(129, blurredPPM.getBlueChannel(2, 1));

    assertEquals(40, blurredPPM.getRedChannel(0, 2));
    assertEquals(96, blurredPPM.getGreenChannel(0, 2));
    assertEquals(87, blurredPPM.getBlueChannel(0, 2));

    assertEquals(34, blurredPPM.getRedChannel(1, 2));
    assertEquals(88, blurredPPM.getGreenChannel(1, 2));
    assertEquals(133, blurredPPM.getBlueChannel(1, 2));

    assertEquals(25, blurredPPM.getRedChannel(2, 2));
    assertEquals(31, blurredPPM.getGreenChannel(2, 2));
    assertEquals(83, blurredPPM.getBlueChannel(2, 2));
  }


  @Test
  public void testBlurTwice() {

    IImageState blurredPPM = blur.run(sourcePPM);
    IImageState blurredTwice = blur.run(blurredPPM);

    assertEquals(3, blurredTwice.getHeight());
    assertEquals(3, blurredTwice.getWidth());

    assertEquals(30, blurredTwice.getRedChannel(0, 0));
    assertEquals(46, blurredTwice.getGreenChannel(0, 0));
    assertEquals(47, blurredTwice.getBlueChannel(0, 0));

    assertEquals(59, blurredTwice.getRedChannel(1, 0));
    assertEquals(54, blurredTwice.getGreenChannel(1, 0));
    assertEquals(79, blurredTwice.getBlueChannel(1, 0));

    assertEquals(54, blurredTwice.getRedChannel(2, 0));
    assertEquals(28, blurredTwice.getGreenChannel(2, 0));
    assertEquals(61, blurredTwice.getBlueChannel(2, 0));

    assertEquals(36, blurredTwice.getRedChannel(0, 1));
    assertEquals(71, blurredTwice.getGreenChannel(0, 1));
    assertEquals(74, blurredTwice.getBlueChannel(0, 1));

    assertEquals(63, blurredTwice.getRedChannel(1, 1));
    assertEquals(78, blurredTwice.getGreenChannel(1, 1));
    assertEquals(118, blurredTwice.getBlueChannel(1, 1));

    assertEquals(54, blurredTwice.getRedChannel(2, 1));
    assertEquals(39, blurredTwice.getGreenChannel(2, 1));
    assertEquals(89, blurredTwice.getBlueChannel(2, 1));

    assertEquals(23, blurredTwice.getRedChannel(0, 2));
    assertEquals(55, blurredTwice.getGreenChannel(0, 2));
    assertEquals(59, blurredTwice.getBlueChannel(0, 2));

    assertEquals(33, blurredTwice.getRedChannel(1, 2));
    assertEquals(59, blurredTwice.getGreenChannel(1, 2));
    assertEquals(89, blurredTwice.getBlueChannel(1, 2));

    assertEquals(25, blurredTwice.getRedChannel(2, 2));
    assertEquals(29, blurredTwice.getGreenChannel(2, 2));
    assertEquals(64, blurredTwice.getBlueChannel(2, 2));
  }

  @Test
  public void testBlurPNG() {
    IImageState blurredPNG = blur.run(sourcePNG);
    assertEquals(3, blurredPNG.getHeight());
    assertEquals(3, blurredPNG.getWidth());

    assertEquals(32, blurredPNG.getRedChannel(0, 0));
    assertEquals(64, blurredPNG.getGreenChannel(0, 0));
    assertEquals(48, blurredPNG.getBlueChannel(0, 0));

    assertEquals(102, blurredPNG.getRedChannel(1, 0));
    assertEquals(80, blurredPNG.getGreenChannel(1, 0));
    assertEquals(112, blurredPNG.getBlueChannel(1, 0));

    assertEquals(108, blurredPNG.getRedChannel(2, 0));
    assertEquals(32, blurredPNG.getGreenChannel(2, 0));
    assertEquals(80, blurredPNG.getBlueChannel(2, 0));

    assertEquals(36, blurredPNG.getRedChannel(0, 1));
    assertEquals(112, blurredPNG.getGreenChannel(0, 1));
    assertEquals(83, blurredPNG.getBlueChannel(0, 1));

    assertEquals(74, blurredPNG.getRedChannel(1, 1));
    assertEquals(100, blurredPNG.getGreenChannel(1, 1));
    assertEquals(170, blurredPNG.getBlueChannel(1, 1));

    assertEquals(79, blurredPNG.getRedChannel(2, 1));
    assertEquals(32, blurredPNG.getGreenChannel(2, 1));
    assertEquals(129, blurredPNG.getBlueChannel(2, 1));

    assertEquals(40, blurredPNG.getRedChannel(0, 2));
    assertEquals(96, blurredPNG.getGreenChannel(0, 2));
    assertEquals(87, blurredPNG.getBlueChannel(0, 2));

    assertEquals(34, blurredPNG.getRedChannel(1, 2));
    assertEquals(88, blurredPNG.getGreenChannel(1, 2));
    assertEquals(133, blurredPNG.getBlueChannel(1, 2));

    assertEquals(25, blurredPNG.getRedChannel(2, 2));
    assertEquals(31, blurredPNG.getGreenChannel(2, 2));
    assertEquals(83, blurredPNG.getBlueChannel(2, 2));
  }

  @Test
  public void testSharpenPPM() {

    IImageState sharpenedPPM = sharpen.run(sourcePPM);
    assertEquals(3, sharpenedPPM.getHeight());
    assertEquals(3, sharpenedPPM.getWidth());
    assertEquals(0, sharpenedPPM.getRedChannel(0, 0));
    assertEquals(80, sharpenedPPM.getGreenChannel(0, 0));
    assertEquals(43, sharpenedPPM.getBlueChannel(0, 0));

    assertEquals(255, sharpenedPPM.getRedChannel(1, 0));
    assertEquals(255, sharpenedPPM.getGreenChannel(1, 0));
    assertEquals(255, sharpenedPPM.getBlueChannel(1, 0));

    assertEquals(255, sharpenedPPM.getRedChannel(2, 0));
    assertEquals(0, sharpenedPPM.getGreenChannel(2, 0));
    assertEquals(138, sharpenedPPM.getBlueChannel(2, 0));

    assertEquals(55, sharpenedPPM.getRedChannel(0, 1));
    assertEquals(255, sharpenedPPM.getGreenChannel(0, 1));
    assertEquals(197, sharpenedPPM.getBlueChannel(0, 1));

    assertEquals(205, sharpenedPPM.getRedChannel(1, 1));
    assertEquals(223, sharpenedPPM.getGreenChannel(1, 1));
    assertEquals(255, sharpenedPPM.getBlueChannel(1, 1));

    assertEquals(222, sharpenedPPM.getRedChannel(2, 1));
    assertEquals(69, sharpenedPPM.getGreenChannel(2, 1));
    assertEquals(255, sharpenedPPM.getBlueChannel(2, 1));

    assertEquals(77, sharpenedPPM.getRedChannel(0, 2));
    assertEquals(235, sharpenedPPM.getGreenChannel(0, 2));
    assertEquals(218, sharpenedPPM.getBlueChannel(0, 2));

    assertEquals(22, sharpenedPPM.getRedChannel(1, 2));
    assertEquals(255, sharpenedPPM.getGreenChannel(1, 2));
    assertEquals(255, sharpenedPPM.getBlueChannel(1, 2));

    assertEquals(0, sharpenedPPM.getRedChannel(2, 2));
    assertEquals(0, sharpenedPPM.getGreenChannel(2, 2));
    assertEquals(152, sharpenedPPM.getBlueChannel(2, 2));
  }

  @Test
  public void testSharpenPNG() {
    IImageState sharpenedPNG = sharpen.run(sourcePNG);
    assertEquals(3, sharpenedPNG.getHeight());
    assertEquals(3, sharpenedPNG.getWidth());
    assertEquals(0, sharpenedPNG.getRedChannel(0, 0));
    assertEquals(80, sharpenedPNG.getGreenChannel(0, 0));
    assertEquals(43, sharpenedPNG.getBlueChannel(0, 0));

    assertEquals(255, sharpenedPNG.getRedChannel(1, 0));
    assertEquals(255, sharpenedPNG.getGreenChannel(1, 0));
    assertEquals(255, sharpenedPNG.getBlueChannel(1, 0));

    assertEquals(255, sharpenedPNG.getRedChannel(2, 0));
    assertEquals(0, sharpenedPNG.getGreenChannel(2, 0));
    assertEquals(138, sharpenedPNG.getBlueChannel(2, 0));

    assertEquals(55, sharpenedPNG.getRedChannel(0, 1));
    assertEquals(255, sharpenedPNG.getGreenChannel(0, 1));
    assertEquals(197, sharpenedPNG.getBlueChannel(0, 1));

    assertEquals(205, sharpenedPNG.getRedChannel(1, 1));
    assertEquals(223, sharpenedPNG.getGreenChannel(1, 1));
    assertEquals(255, sharpenedPNG.getBlueChannel(1, 1));

    assertEquals(222, sharpenedPNG.getRedChannel(2, 1));
    assertEquals(69, sharpenedPNG.getGreenChannel(2, 1));
    assertEquals(255, sharpenedPNG.getBlueChannel(2, 1));

    assertEquals(77, sharpenedPNG.getRedChannel(0, 2));
    assertEquals(235, sharpenedPNG.getGreenChannel(0, 2));
    assertEquals(218, sharpenedPNG.getBlueChannel(0, 2));

    assertEquals(22, sharpenedPNG.getRedChannel(1, 2));
    assertEquals(255, sharpenedPNG.getGreenChannel(1, 2));
    assertEquals(255, sharpenedPNG.getBlueChannel(1, 2));

    assertEquals(0, sharpenedPNG.getRedChannel(2, 2));
    assertEquals(0, sharpenedPNG.getGreenChannel(2, 2));
    assertEquals(152, sharpenedPNG.getBlueChannel(2, 2));
  }

  @Test
  public void testSharpenTwice() {
    IImageState sharpenedPNG = sharpen.run(sourcePNG);
    IImageState sharpenedTwice = sharpen.run(sharpenedPNG);
    assertEquals(3, sharpenedTwice.getHeight());
    assertEquals(3, sharpenedTwice.getWidth());

    assertEquals(57, sharpenedTwice.getRedChannel(0, 0));
    assertEquals(193, sharpenedTwice.getGreenChannel(0, 0));
    assertEquals(93, sharpenedTwice.getBlueChannel(0, 0));

    assertEquals(255, sharpenedTwice.getRedChannel(1, 0));
    assertEquals(255, sharpenedTwice.getGreenChannel(1, 0));
    assertEquals(255, sharpenedTwice.getBlueChannel(1, 0));

    assertEquals(255, sharpenedTwice.getRedChannel(2, 0));
    assertEquals(34, sharpenedTwice.getGreenChannel(2, 0));
    assertEquals(221, sharpenedTwice.getBlueChannel(2, 0));

    assertEquals(135, sharpenedTwice.getRedChannel(0, 1));
    assertEquals(255, sharpenedTwice.getGreenChannel(0, 1));
    assertEquals(255, sharpenedTwice.getBlueChannel(0, 1));

    assertEquals(255, sharpenedTwice.getRedChannel(1, 1));
    assertEquals(255, sharpenedTwice.getGreenChannel(1, 1));
    assertEquals(255, sharpenedTwice.getBlueChannel(1, 1));

    assertEquals(255, sharpenedTwice.getRedChannel(2, 1));
    assertEquals(181, sharpenedTwice.getGreenChannel(2, 1));
    assertEquals(255, sharpenedTwice.getBlueChannel(2, 1));

    assertEquals(56, sharpenedTwice.getRedChannel(0, 2));
    assertEquals(255, sharpenedTwice.getGreenChannel(0, 2));
    assertEquals(255, sharpenedTwice.getBlueChannel(0, 2));

    assertEquals(98, sharpenedTwice.getRedChannel(1, 2));
    assertEquals(255, sharpenedTwice.getGreenChannel(1, 2));
    assertEquals(255, sharpenedTwice.getBlueChannel(1, 2));

    assertEquals(32, sharpenedTwice.getRedChannel(2, 2));
    assertEquals(34, sharpenedTwice.getGreenChannel(2, 2));
    assertEquals(237, sharpenedTwice.getBlueChannel(2, 2));
  }
}
